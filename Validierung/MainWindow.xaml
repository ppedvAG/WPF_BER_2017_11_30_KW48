<Window x:Class="Validierung.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Validierung"
        mc:Ignorable="d"
        Title="MainWindow" Height="311.671" Width="326.225">
    <Window.Resources>
        <!--ErrorTemplates sind ControlTemplates, welche das Elemenet im Falle einer verletzten ValidationRule anzeigt-->
        <ControlTemplate x:Key="ctpError">
            <StackPanel>
                <Border BorderBrush="DarkRed"  BorderThickness="3">
                    <!--AdornedElementPlaceholder sind Platzhalterelemente für das ürsprüngliche Element in
                        ErrorTemplates-->
                    <AdornedElementPlaceholder x:Name="aep"/>
                </Border>
                <TextBlock Foreground="Red" Text="{Binding ElementName=aep, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"/>
            </StackPanel>
        </ControlTemplate>
    </Window.Resources>

    <StackPanel Margin="20">
        <TextBox x:Name="tbxIpInput" Validation.ErrorTemplate="{StaticResource ctpError}">
            <TextBox.Text>
                <Binding ElementName="tblIpOutput" Path="Text" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <!--ValidationRules definieren, wann eine Eingabe durch den Benutzer eine zulässige Eingabe ist und
                        geben das Ergebnis dieser Prüfung an die GUI zurück. Im False-Fall wird gegebenenfalls ein ErrorTemplate
                        angezeigt. ValidationsRules werden als C#-Klasse abgelegt.-->
                        <local:IpValidierung/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>
        </TextBox>
        <TextBlock Text="{Binding ElementName=tbxIpInput, Path=(Validation.Errors)[0].ErrorContent}"/>
        <TextBlock x:Name="tblIpOutput"/>
        <Separator/>

        <StackPanel x:Name="splPerson">
            <StackPanel.DataContext>
                <local:Person/>
            </StackPanel.DataContext>

            <!--Mit der Property ValidatesOnExceptions können vom CodeBehinde geworfene Exceptions als ValidierungsFall von der GUI aufgefangen werden-->
            <TextBox x:Name="tbxVorname" Text="{Binding Vorname, UpdateSourceTrigger=PropertyChanged, ValidatesOnExceptions=True}"/>
            <TextBlock Text="{Binding ElementName=tbxVorname, Path=(Validation.Errors)[0].ErrorContent}"/>

            <!--Mit der Property ValidatesOnDataErrors können durch bestimmte Interfaces direkt in der Datenklasse ValidierungsFälle definiert werden-->
            <TextBox x:Name="tbxAlter" Text="{Binding Alter, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}">
                <Validation.ErrorTemplate>
                    <ControlTemplate>
                        <StackPanel>
                            <Border BorderBrush="Red" BorderThickness="2" x:Name="bdrAep">
                                <AdornedElementPlaceholder x:Name="aep1"/>
                            </Border>
                            <Popup PlacementTarget="{Binding ElementName=bdrAep}"
                                   IsOpen="{Binding ElementName=aep1, Path=AdornedElement.IsFocused, Mode=OneWay}"
                                   PopupAnimation="Fade">
                                <TextBlock Foreground="White" 
                                           Text="{Binding ElementName=aep1, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"
                                           Background="Red"/>
                            </Popup>
                        </StackPanel>
                    </ControlTemplate>
                </Validation.ErrorTemplate>
            </TextBox>
            <TextBlock Text="{Binding ElementName=tbxAlter, Path=(Validation.Errors)[0].ErrorContent}"/>
        </StackPanel>
    </StackPanel>
</Window>
